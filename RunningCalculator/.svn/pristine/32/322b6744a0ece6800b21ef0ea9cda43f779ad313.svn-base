package pmg.android.runningcalculator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import pmg.android.runningcalculator.data.CalculatedItem;
import pmg.android.runningcalculator.data.InputValue;
import pmg.android.runningcalculator.data.InputValueGenerator;
import pmg.android.runningcalculator.data.InputValueList;
import pmg.android.runningcalculator.data.ItemGenerator;
import pmg.android.runningcalculator.view.DisplayStringFormatter;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Editable;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class InputPromptDialog extends Dialog {
	private EditText valueEditText;
	private View promptMessageView;
	private final ArrayList<HashMap<String, InputValue>> inputValueAdapterMapList = new ArrayList<HashMap<String, InputValue>>();
	private SimpleAdapter valueListAdapter;
	private final OnItemsChangedListener itemsChangedListener;
	private final InputValueList initialValues;
	private final ItemGenerator itemGenerator;

	private static final String VALUE_KEY = "value";

	public interface OnItemsChangedListener {
		void onItemsChanged(InputValueList inputValues, List<CalculatedItem> items);
	}

	public InputPromptDialog(Context context, InputValueList initialValues, OnItemsChangedListener itemsChangedListener) {
		super(context, android.R.style.Theme_Translucent_NoTitleBar);

		this.initialValues = initialValues;
		this.itemsChangedListener = itemsChangedListener;
		itemGenerator = new ItemGenerator(context);
		setContentView(R.layout.input_prompt);
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		valueEditText = (EditText) findViewById(android.R.id.edit);
		promptMessageView = findViewById(R.id.prompt_message);

		valueListAdapter = new SimpleAdapter(getContext(), inputValueAdapterMapList, R.layout.input_value_item_view, new String[] { VALUE_KEY },
				new int[] { R.id.input_value });
		valueListAdapter.setViewBinder(new SimpleAdapter.ViewBinder() {

			@Override
			public boolean setViewValue(View view, Object data, String textRepresentation) {
				InputValue inputValue = (InputValue) data;
				((TextView) view).setText(DisplayStringFormatter.formatInputValue(getContext().getResources(), inputValue));
				return true;
			}
		});

		GridView gridView = (GridView) findViewById(android.R.id.list);
		gridView.setAdapter(valueListAdapter);
		gridView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				@SuppressWarnings("unchecked")
				HashMap<String, InputValue> item = (HashMap<String, InputValue>) valueListAdapter.getItem(position);
				notifyAndClose(new InputValueList(valueEditText.getText().toString(), item.get(VALUE_KEY)));
			}
		});

		if (initialValues != null && initialValues.getSeed().length() > 0) {
			setSeedText(initialValues.getSeed());
			valueEditText.setSelection(initialValues.getSeed().length());
		} else
			onTextChanged("");
		attachButtons();
	}

	private void attachButtons() {
		attachKeyboardButtons((ViewGroup) findViewById(R.id.button_parent_view));

		findViewById(R.id.close_button).setOnClickListener(new android.view.View.OnClickListener() {

			@Override
			public void onClick(View v) {
				dismiss();
			}
		});
		findViewById(R.id.back_button).setOnClickListener(new android.view.View.OnClickListener() {

			@Override
			public void onClick(View v) {
				int selStart = valueEditText.getSelectionStart(), selEnd = valueEditText.getSelectionEnd();
				Editable text = valueEditText.getText();
				if (selStart == selEnd && selStart > 0)
					text.delete(selStart - 1, selStart);
				else
					text.delete(selStart, selEnd);
				onTextChanged(text.toString());
			}
		});
	}

	private void notifyAndClose(InputValueList values) {
		itemsChangedListener.onItemsChanged(values, itemGenerator.generateItems(values.getValues()));
		dismiss();
	}

	private void setSeedText(String text) {
		valueEditText.setText(text);
		onTextChanged(text);
	}

	private void onTextChanged(String newText) {
		if (newText.isEmpty()) {
			inputValueAdapterMapList.clear();
			valueListAdapter.notifyDataSetChanged();
		} else
			populateListFromInputSeed(newText);

		if (newText.isEmpty()) {
			promptMessageView.setVisibility(View.VISIBLE);
		} else
			promptMessageView.setVisibility(View.GONE);

	}

	private android.view.View.OnClickListener buttonListener = new View.OnClickListener() {

		@Override
		public void onClick(View v) {
			Editable text = valueEditText.getText();
			text.insert(valueEditText.getSelectionStart(), ((Button) v).getText());

			onTextChanged(text.toString());
		}
	};

	private void attachKeyboardButtons(ViewGroup parent) {
		for (int i = 0, imax = parent.getChildCount(); i < imax; ++i) {
			View view = parent.getChildAt(i);
			if (view instanceof ViewGroup) {
				attachKeyboardButtons((ViewGroup) view);
			} else if (view instanceof Button) {
				((Button) view).setOnClickListener(buttonListener);
			}
		}
	}

	private static class GeneratedItems {
		public InputValueList inputValues;
		public List<CalculatedItem> calculatedItems;
	}

	private void populateListFromInputSeed(final String newSeed) {
		new AsyncTask<String, Void, GeneratedItems>() {

			@Override
			protected GeneratedItems doInBackground(String... arg0) {
				GeneratedItems ret = new GeneratedItems();
				ret.inputValues = InputValueGenerator.generateValuesFromSeed(arg0[0]);
				ret.calculatedItems = itemGenerator.generateItems(ret.inputValues.getValues());
				return ret;
			}

			@Override
			protected void onPostExecute(GeneratedItems generatedItems) {
				InputValueList inputValueList = new InputValueList(newSeed);
				inputValueAdapterMapList.clear();
				for (InputValue value : generatedItems.inputValues.getValues()) {
					if (value.getGeneratedItemsList().size() > 0) {
						inputValueList.add(value);
						HashMap<String, InputValue> map = new HashMap<String, InputValue>();
						map.put(VALUE_KEY, value);
						inputValueAdapterMapList.add(map);
					}
				}
				valueListAdapter.notifyDataSetChanged();
				// itemsChangedListener.onItemsChanged(generatedItems.inputValues,
				// generatedItems.calculatedItems);

			}
		}.execute(newSeed);
	}

}
